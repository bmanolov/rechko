<?php

/**
 * BaseWord
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property clob $meaning
 * @property clob $synonyms
 * @property string $classification
 * @property integer $type_id
 * @property string $pronunciation
 * @property clob $etymology
 * @property clob $related_words
 * @property clob $derived_words
 * @property integer $chitanka_count
 * @property float $chitanka_percent
 * @property integer $chitanka_rank
 * @property integer $search_count
 * @property enum $source
 * @property string $other_langs
 * @property WordType $Type
 * @property Doctrine_Collection $IncorrectForms
 * @property Doctrine_Collection $DerivativeForms
 * @property Doctrine_Collection $Translations
 * @property Doctrine_Collection $Revisions
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method clob                getMeaning()          Returns the current record's "meaning" value
 * @method clob                getSynonyms()         Returns the current record's "synonyms" value
 * @method string              getClassification()   Returns the current record's "classification" value
 * @method integer             getTypeId()           Returns the current record's "type_id" value
 * @method string              getPronounciation()   Returns the current record's "pronounciation" value
 * @method clob                getEtymology()        Returns the current record's "etymology" value
 * @method clob                getRelatedWords()     Returns the current record's "related_words" value
 * @method clob                getDerivedWords()     Returns the current record's "derived_words" value
 * @method integer             getChitankaCount()    Returns the current record's "chitanka_count" value
 * @method float               getChitankaPercent()  Returns the current record's "chitanka_percent" value
 * @method integer             getChitankaRank()     Returns the current record's "chitanka_rank" value
 * @method integer             getSearchCount()      Returns the current record's "search_count" value
 * @method enum                getSource()           Returns the current record's "source" value
 * @method string              getOtherLangs()       Returns the current record's "other_langs" value
 * @method WordType            getType()             Returns the current record's "Type" value
 * @method Doctrine_Collection getIncorrectForms()   Returns the current record's "IncorrectForms" collection
 * @method Doctrine_Collection getDerivativeForms()  Returns the current record's "DerivativeForms" collection
 * @method Doctrine_Collection getTranslations()     Returns the current record's "Translations" collection
 * @method Doctrine_Collection getRevisions()        Returns the current record's "Revisions" collection
 * @method Word                setId()               Sets the current record's "id" value
 * @method Word                setMeaning()          Sets the current record's "meaning" value
 * @method Word                setSynonyms()         Sets the current record's "synonyms" value
 * @method Word                setClassification()   Sets the current record's "classification" value
 * @method Word                setTypeId()           Sets the current record's "type_id" value
 * @method Word                setPronounciation()   Sets the current record's "pronounciation" value
 * @method Word                setEtymology()        Sets the current record's "etymology" value
 * @method Word                setRelatedWords()     Sets the current record's "related_words" value
 * @method Word                setDerivedWords()     Sets the current record's "derived_words" value
 * @method Word                setChitankaCount()    Sets the current record's "chitanka_count" value
 * @method Word                setChitankaPercent()  Sets the current record's "chitanka_percent" value
 * @method Word                setChitankaRank()     Sets the current record's "chitanka_rank" value
 * @method Word                setSearchCount()      Sets the current record's "search_count" value
 * @method Word                setSource()           Sets the current record's "source" value
 * @method Word                setOtherLangs()       Sets the current record's "other_langs" value
 * @method Word                setType()             Sets the current record's "Type" value
 * @method Word                setIncorrectForms()   Sets the current record's "IncorrectForms" collection
 * @method Word                setDerivativeForms()  Sets the current record's "DerivativeForms" collection
 * @method Word                setTranslations()     Sets the current record's "Translations" collection
 * @method Word                setRevisions()        Sets the current record's "Revisions" collection
 * 
 * @package    rechnik
 * @subpackage model
 * @author     borislav
 * @version    SVN: $Id: Builder.php 7200 2010-02-21 09:37:37Z beberlei $
 */
abstract class BaseWord extends AbstractWord
{
    public function setTableDefinition()
    {
        parent::setTableDefinition();
        $this->setTableName('word');
        $this->hasColumn('id', 'integer', 3, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '3',
             ));
        $this->hasColumn('meaning', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('synonyms', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('classification', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('type_id', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             ));
        $this->hasColumn('pronunciation', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('etymology', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('related_words', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('derived_words', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('chitanka_count', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('chitanka_percent', 'float', null, array(
             'type' => 'float',
             ));
        $this->hasColumn('chitanka_rank', 'integer', 3, array(
             'type' => 'integer',
             'length' => '3',
             ));
        $this->hasColumn('search_count', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('source', 'enum', null, array(
             'type' => 'enum',
             'default' => 'user',
             'values' => 
             array(
              0 => 'bgoffice',
              1 => 'eurodict',
              2 => 'idi',
              3 => 'onlinerechnik',
              4 => 'user',
             ),
             ));
        $this->hasColumn('other_langs', 'string', null, array(
             'type' => 'string',
             ));


        $this->index('name_type', array(
             'fields' => 
             array(
              0 => 'name',
              1 => 'type_id',
             ),
             'type' => 'unique',
             ));
        $this->index('search', array(
             'fields' => 
             array(
              0 => 'search_count',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('WordType as Type', array(
             'local' => 'type_id',
             'foreign' => 'id'));

        $this->hasMany('IncorrectForm as IncorrectForms', array(
             'local' => 'id',
             'foreign' => 'correct_word_id'));

        $this->hasMany('DerivativeForm as DerivativeForms', array(
             'local' => 'id',
             'foreign' => 'base_word_id'));

        $this->hasMany('WordTranslation as Translations', array(
             'local' => 'id',
             'foreign' => 'word_id'));

        $this->hasMany('WordRevision as Revisions', array(
             'local' => 'id',
             'foreign' => 'object_id'));

        $softdelete0 = new Doctrine_Template_SoftDelete();
        $this->actAs($softdelete0);
    }
}
